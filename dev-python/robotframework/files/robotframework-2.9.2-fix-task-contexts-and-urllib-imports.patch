From fdc1b1c2e8346ac56ef30d73070e731f1eabeac6 Mon Sep 17 00:00:00 2001
From: Stephen Arnold <nerdboy@gentoo.org>
Date: Sun, 2 Dec 2018 01:04:57 -0800
Subject: [PATCH 1/3] tasks.py: misc fixes, task contexts and urllib imports

Signed-off-by: Stephen Arnold <nerdboy@gentoo.org>
---
 tasks.py | 78 +++++++++++++++++++++++++++++++-------------------------
 1 file changed, 43 insertions(+), 35 deletions(-)

diff --git a/tasks.py b/tasks.py
index 764538df5..996e92751 100644
--- a/tasks.py
+++ b/tasks.py
@@ -5,6 +5,12 @@ and run `invoke --help` and `invode --list` for details how to execute tasks.
 
 See BUILD.rst for packaging and releasing instructions.
 """
+from __future__ import print_function
+
+try:
+    from urllib.request import urlretrieve
+except ImportError:
+    import urllib
 
 import os
 import re
@@ -12,11 +18,13 @@ import shutil
 import tarfile
 import tempfile
 import time
-import urllib
 import zipfile
 
-from invoke import task, run
+from invoke import task, __version_info__
+from sys import exit
 
+if __version_info__ < (0, 13):
+    exit('invoke 0.13 or newer needed')
 
 assert os.getcwd() == os.path.dirname(os.path.abspath(__file__))
 
@@ -25,28 +33,28 @@ VERSION_FILE = os.path.join('src', 'robot', 'version.py')
 
 
 @task(default=True)
-def help():
+def help(ctx):
     """Show help, basically an alias for --help.
 
     This task can be removed once the fix to this issue is released:
     https://github.com/pyinvoke/invoke/issues/180
     """
-    run('invoke --help')
+    ctx.run('invoke --help')
 
 
 @task
-def tag_release(version):
+def tag_release(ctx,version):
     """Tag specified release.
 
     Updates version using `set_version`, creates tag, and pushes changes.
     """
-    version = set_version(version, push=True)
-    run("git tag -a {0} -m 'Release {0}'".format(version))
-    run("git push --tags")
+    version = set_version(ctx, version, push=True)
+    ctx.run("git tag -a {0} -m 'Release {0}'".format(version))
+    ctx.run("git push --tags")
 
 
 @task
-def set_version(version, push=False):
+def set_version(ctx, version, push=False):
     """Set version in `src/robot/version.py`.
 
     Version can have these values:
@@ -72,9 +80,9 @@ def set_version(version, push=False):
         write_version_file(version)
         write_pom_file(version)
     version = get_version_from_file()
-    print 'Version:', version
+    print('Version:', version)
     if push:
-        git_commit([VERSION_FILE, 'pom.xml'],
+        git_commit(ctx, [VERSION_FILE, 'pom.xml'],
                    'Updated version to {}'.format(version), push=True)
     return version
 
@@ -115,15 +123,15 @@ def get_version_from_file():
     execfile(VERSION_FILE, namespace)
     return namespace['get_version']()
 
-def git_commit(paths, message, push=False):
+def git_commit(ctx, paths, message, push=False):
     paths = paths if isinstance(paths, basestring) else ' '.join(paths)
-    run("git commit -m '{}' {}".format(message, paths))
+    ctx.run("git commit -m '{}' {}".format(message, paths))
     if push:
-        run('git push')
+        ctx.run('git push')
 
 
 @task
-def clean(remove_dist=True, create_dirs=False):
+def clean(ctx, remove_dist=True, create_dirs=False):
     """Clean workspace.
 
     By default deletes 'build' and 'dist' directories and removes '*.pyc'
@@ -146,23 +154,23 @@ def clean(remove_dist=True, create_dirs=False):
 
 
 @task
-def sdist(deploy=False, remove_dist=False):
+def sdist(ctx, deploy=False, remove_dist=False):
     """Create source distribution.
 
     Args:
         deploy:       Register and upload sdist to PyPI.
         remove_dist:  Control is 'dist' directory initially removed or not.
     """
-    clean(remove_dist, create_dirs=True)
-    run('python setup.py sdist'
+    clean(ctx, remove_dist, create_dirs=True)
+    ctx.run('python setup.py sdist'
         + (' register upload' if deploy else ''))
     announce()
 
 def announce():
     print
-    print 'Distributions:'
+    print('Distributions:')
     for name in os.listdir('dist'):
-        print os.path.join('dist', name)
+        print(os.path.join('dist', name))
 
 
 @task
@@ -179,7 +187,7 @@ def wininst(remove_dist=False):
 
 
 @task
-def jar(jython_version='2.7.0', pyyaml_version='3.11', remove_dist=False):
+def jar(ctx, jython_version='2.7.0', pyyaml_version='3.11', remove_dist=False):
     """Create JAR distribution.
 
     Downloads Jython JAR and PyYAML if needed.
@@ -191,16 +199,16 @@ def jar(jython_version='2.7.0', pyyaml_version='3.11', remove_dist=False):
         pyyaml_version: Version of PyYAML that will be included in the
             standalone jar. The version must be available from PyPI.
     """
-    clean(remove_dist, create_dirs=True)
+    clean(ctx, remove_dist, create_dirs=True)
     jython_jar = get_jython_jar(jython_version)
-    print 'Using {0}'.format(jython_jar)
-    compile_java_files(jython_jar)
+    print('Using {0}'.format(jython_jar))
+    compile_java_files(ctx, jython_jar)
     unzip_jar(jython_jar)
     copy_robot_files()
     pyaml_archive = get_pyyaml(pyyaml_version)
     extract_and_copy_pyyaml_files(pyyaml_version, pyaml_archive)
-    compile_python_files(jython_jar)
-    filename = create_robot_jar(get_version_from_file())
+    compile_python_files(ctx, jython_jar)
+    filename = create_robot_jar(ctx, get_version_from_file())
     announce()
     return os.path.abspath(filename)
 
@@ -220,7 +228,7 @@ def get_extlib_file(filename, url):
     path = os.path.join(lib, filename)
     if os.path.exists(path):
         return path
-    print '{0} not found, downloading it from {1}.'.format(filename, url)
+    print('{0} not found, downloading it from {1}.'.format(filename, url))
     if not os.path.exists(lib):
         os.mkdir(lib)
     urllib.urlretrieve(url, path)
@@ -231,18 +239,18 @@ def extract_and_copy_pyyaml_files(version, filename, build_dir='build'):
     extracted = os.path.join(tempfile.gettempdir(), 'pyyaml-for-robot')
     if os.path.isdir(extracted):
         shutil.rmtree(extracted)
-    print 'Extracting {0} to {1}'.format(filename, extracted)
+    print('Extracting {0} to {1}'.format(filename, extracted))
     t.extractall(extracted)
     source = os.path.join(extracted, 'PyYAML-{0}'.format(version), 'lib', 'yaml')
     target = os.path.join(build_dir, 'Lib', 'yaml')
     shutil.copytree(source, target, ignore=shutil.ignore_patterns('*.pyc'))
 
-def compile_java_files(jython_jar, build_dir='build'):
+def compile_java_files(ctx, jython_jar, build_dir='build'):
     root = os.path.join('src', 'java', 'org', 'robotframework')
     files = [os.path.join(root, name) for name in os.listdir(root)
              if name.endswith('.java')]
-    print 'Compiling {0} Java files.'.format(len(files))
-    run('javac -d {target} -target 1.7 -source 1.7 -cp {cp} {files}'.format(
+    print('Compiling {0} Java files.'.format(len(files)))
+    ctx.run('javac -d {target} -target 1.7 -source 1.7 -cp {cp} {files}'.format(
         target=build_dir, cp=jython_jar, files=' '.join(files)))
 
 def unzip_jar(path, target='build'):
@@ -254,18 +262,18 @@ def copy_robot_files(build_dir='build'):
     shutil.copytree(source, target, ignore=shutil.ignore_patterns('*.pyc'))
     shutil.rmtree(os.path.join(target, 'htmldata', 'testdata'))
 
-def compile_python_files(jython_jar, build_dir='build'):
-    run('java -jar {0} -m compileall {1}'.format(jython_jar, build_dir))
+def compile_python_files(ctx, jython_jar, build_dir='build'):
+    ctx.run("java -jar {0} -m compileall -x '.*3.py' {1}".format(jython_jar, build_dir))
     # Jython will not work without its py-files, but robot will
     for directory, _, files in os.walk(os.path.join(build_dir, 'Lib', 'robot')):
         for name in files:
             if name.endswith('.py'):
                 os.remove(os.path.join(directory, name))
 
-def create_robot_jar(version, source='build'):
+def create_robot_jar(ctx, version, source='build'):
     write_manifest(version, source)
     target = os.path.join('dist', 'robotframework-{0}.jar'.format(version))
-    run('jar cvfM {0} -C {1} .'.format(target, source))
+    ctx.run('jar cvfM {0} -C {1} .'.format(target, source))
     return target
 
 def write_manifest(version, build_dir='build'):
-- 
2.18.0

