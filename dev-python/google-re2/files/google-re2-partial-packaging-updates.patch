From 31a1b90b033c316d91eb89512b6485fde24b4fd6 Mon Sep 17 00:00:00 2001
From: Stephen L Arnold <nerdboy@gentoo.org>
Date: Sun, 10 Jul 2022 13:06:15 -0700
Subject: [PATCH] fix: usr: partial packaging updates !wip

Signed-off-by: Stephen L Arnold <nerdboy@gentoo.org>
---
 CMakeLists.txt |  1 -
 pyproject.toml |  1 -
 setup.py       | 72 +++++++++++++++++++++++++-------------------------
 tox.ini        | 25 ++++++++++++++----
 4 files changed, 56 insertions(+), 43 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 89a8812..86ef7c4 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -3,7 +3,6 @@ cmake_minimum_required(VERSION 3.18)
 project(_re2 LANGUAGES CXX)
 
 set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
-set(CMAKE_VERBOSE_MAKEFILE ON)
 
 set(CMAKE_CXX_STANDARD 11)
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
diff --git a/pyproject.toml b/pyproject.toml
index c41e470..eb93b79 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,7 +1,6 @@
 [build-system]
 requires = [
     "setuptools>=42",
-    "wheel",
     "setuptools_scm[toml]>=6.2",
     "pybind11>=2.6.0",
     "ninja; sys_platform != 'Windows'",
diff --git a/setup.py b/setup.py
index 9626454..ad21068 100644
--- a/setup.py
+++ b/setup.py
@@ -2,6 +2,7 @@
 #
 
 import os
+import re
 import sys
 import subprocess
 
@@ -26,21 +27,6 @@ class CMakeExtension(Extension):
 
 
 class CMakeBuild(build_ext):
-    def run(self):
-        # This is optional - will print a nicer error if CMake is missing.
-        # Since we force CMake via PEP 518 in the pyproject.toml, this should
-        # never happen and this whole method can be removed in your code if you
-        # want.
-        try:
-            subprocess.check_output(["cmake", "--version"])
-        except OSError:
-            msg = "CMake missing - probably upgrade to a newer version of Pip?"
-            raise RuntimeError(msg)
-
-        # To support Python 2, we have to avoid super(), since distutils is all
-        # old-style classes.
-        build_ext.run(self)
-
     def build_extension(self, ext):
         extdir = os.path.abspath(os.path.dirname(self.get_ext_fullpath(ext.name)))
 
@@ -62,18 +48,19 @@ class CMakeBuild(build_ext):
         # SCM_VERSION_INFO shows you how to pass a value into the C++ code
         # from Python.
         cmake_args = [
-            "-DCMAKE_LIBRARY_OUTPUT_DIRECTORY={}".format(extdir),
-            "-DPYTHON_EXECUTABLE={}".format(sys.executable),
-            "-DSCM_VERSION_INFO={}".format(fallback_ver),
-            "-DCMAKE_BUILD_TYPE={}".format(cfg),  # not used on MSVC, but no harm
+            f"-DCMAKE_LIBRARY_OUTPUT_DIRECTORY={extdir}",
+            f"-DPYTHON_EXECUTABLE={sys.executable}",
+            f"-DCMAKE_BUILD_TYPE={cfg}",  # not used on MSVC, but no harm
         ]
         build_args = ["--verbose"]
 
-        # CMake also lets you provide a toolchain file.
-        # Can be set in CI build environments for example.
-        cmake_toolchain_file = os.environ.get("CMAKE_TOOLCHAIN_FILE", "")
-        if cmake_toolchain_file:
-            cmake_args += ["-DCMAKE_TOOLCHAIN_FILE={}".format(cmake_toolchain_file)]
+        # Adding CMake arguments set as environment variable
+        # (needed e.g. to build for ARM OSx on conda-forge)
+        if "CMAKE_ARGS" in os.environ:
+            cmake_args += [item for item in os.environ["CMAKE_ARGS"].split(" ") if item]
+
+        # In this example, we pass in the version to C++. You might not need to.
+        cmake_args += [f"-DSCM_VERSION_INFO={self.distribution.get_version()}"]
 
         if self.compiler.compiler_type != "msvc":
             # Using Ninja-build since it a) is available as a wheel and b)
@@ -81,8 +68,17 @@ class CMakeBuild(build_ext):
             # exported for Ninja to pick it up, which is a little tricky to do.
             # Users can override the generator with CMAKE_GENERATOR in CMake
             # 3.15+.
-            if not cmake_generator:
-                cmake_args += ["-GNinja"]
+            if not cmake_generator or cmake_generator == "Ninja":
+                try:
+                    import ninja  # noqa: F401
+
+                    ninja_executable_path = os.path.join(ninja.BIN_DIR, "ninja")
+                    cmake_args += [
+                        "-GNinja",
+                        f"-DCMAKE_MAKE_PROGRAM:FILEPATH={ninja_executable_path}",
+                    ]
+                except ImportError:
+                    pass
 
         else:
 
@@ -101,10 +97,17 @@ class CMakeBuild(build_ext):
             # Multi-config generators have a different way to specify configs
             if not single_config:
                 cmake_args += [
-                    "-DCMAKE_LIBRARY_OUTPUT_DIRECTORY_{}={}".format(cfg.upper(), extdir)
+                    f"-DCMAKE_LIBRARY_OUTPUT_DIRECTORY_{cfg.upper()}={extdir}"
                 ]
                 build_args += ["--config", cfg]
 
+        if sys.platform.startswith("darwin"):
+            # Cross-compile support for macOS - respect ARCHFLAGS if set
+            archs = re.findall(r"-arch (\S+)", os.environ.get("ARCHFLAGS", ""))
+            if archs:
+                cmake_args += ["-DCMAKE_OSX_ARCHITECTURES={}".format(";".join(archs))]
+
+
         # Set CMAKE_BUILD_PARALLEL_LEVEL to control the parallel build level
         # across all generators.
         if "CMAKE_BUILD_PARALLEL_LEVEL" not in os.environ:
@@ -112,17 +115,14 @@ class CMakeBuild(build_ext):
             # using -j in the build_ext call, not supported by pip or PyPA-build.
             if hasattr(self, "parallel") and self.parallel:
                 # CMake 3.12+ only.
-                build_args += ["-j{}".format(self.parallel)]
+                build_args += [f"-j{self.parallel}"]
 
-        if not os.path.exists(self.build_temp):
-            os.makedirs(self.build_temp)
+        build_temp = os.path.join(self.build_temp, ext.name)
+        if not os.path.exists(build_temp):
+            os.makedirs(build_temp)
 
-        subprocess.check_call(
-            ["cmake", ext.sourcedir] + cmake_args, cwd=self.build_temp
-        )
-        subprocess.check_call(
-            ["cmake", "--build", "."] + build_args, cwd=self.build_temp
-        )
+        subprocess.check_call(["cmake", ext.sourcedir] + cmake_args, cwd=build_temp)
+        subprocess.check_call(["cmake", "--build", "."] + build_args, cwd=build_temp)
 
 
 setup(
diff --git a/tox.ini b/tox.ini
index 67ca423..ec6e8e0 100644
--- a/tox.ini
+++ b/tox.ini
@@ -29,12 +29,9 @@ passenv =
     CMAKE_GENERATOR
 
 deps =
-    pip>=19.0.1
+    pip>=22.1
     -rrequirements-dev.txt
 
-commands_pre =
-    python -m pip install --upgrade pip
-
 commands =
     python -m pip install -e .[test,cov]
     python -m pytest -v --cov re2 --cov-report term-missing {toxinidir} {posargs}
@@ -42,6 +39,7 @@ commands =
 
 [testenv:dev]
 passenv =
+    pythonLocation
     CI
     PYTHON
     CC
@@ -68,6 +66,7 @@ commands =
 
 [testenv:deploy]
 passenv =
+    pythonLocation
     CI
     PYTHON
     CC
@@ -75,6 +74,8 @@ passenv =
     CMAKE_BUILD_OVERRIDE
     CMAKE_TOOLCHAIN_FILE
     CMAKE_GENERATOR
+    PYTHONIOENCODING
+    PIP_DOWNLOAD_CACHE
 
 deps =
     pip>=19.0.1
@@ -82,5 +83,19 @@ deps =
     build
 
 commands =
-    python -m build -o dist
+    python -m build .
     twine check dist/*
+
+[testenv:check]
+skip_install = true
+passenv = CI PYTHON PYTHONIOENCODING
+
+allowlist_externals = bash
+
+deps =
+    pip>=22.1
+
+commands =
+    bash -c 'export WHL_FILE=$(ls dist/*.whl); \
+        python -m pip install $WHL_FILE'
+    python -c "import re2; print(re2.Options().encoding)"
-- 
2.32.0

